{"version":3,"sources":["../src/entity_dynamic_table.js"],"names":["watching","fetchTableContent","component","handler","uniqueid","sortData","joinType","filters","firstinitial","lastinitial","pageNumber","pageSize","hiddenColumns","resetPreferences","methodname","args","sortdata","jointype","pagenumber","pagesize","hiddencolumns","resetpreferences","refreshTableContent","tableRoot","resetContent","filterset","getFiltersetFromTable","pendingPromise","Pending","dataset","tableComponent","tableHandler","tableUniqueid","JSON","parse","tableSortData","tableFirstInitial","tableLastInitial","tablePageNumber","tablePageSize","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","checkTableIsDynamic","Error","matches","Selectors","main","region","tableFilters","updateTable","sortBy","sortOrder","firstInitial","lastInitial","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setFilters","getFilters","setSortOrder","setPageNumber","getPageNumber","setPageSize","getPageSize","setFirstInitial","getFirstInitial","setLastInitial","getLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","resetTablePreferences","init","addEventListener","e","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferencesLink","tableRegionId","querySelector","fromRegionId"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features for entities.\n *\n * TODO: find a way to override just the url of the API\n * @module     local_cltools/entity_dynamic_table\n * @package    local_cltools\n * @copyright 2020 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Events from 'core_table/local/dynamic/events';\nimport {call as fetchMany} from \"core/ajax\";\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport Pending from 'core/pending';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\n\nlet watching = false;\n\n/**\n * Fetch table view.\n *\n * @method fetch\n * @param {String} component The component\n * @param {String} handler The name of the handler\n * @param {String} uniqueid The unique id of the table\n * @param {Object} options The options to use when updating the table\n * @param {Array} options.sortData The list of columns to sort by\n * @param {Number} options.joinType The filterset join type\n * @param {Object} options.filters The filters to apply when searching\n * @param {String} options.firstinitial The first name initial to filter on\n * @param {String} options.lastinitial The last name initial to filter on\n * @param {String} options.pageNumber The page number\n * @param {Number} options.pageSize The page size\n * @param {Object} options.hiddenColumns The columns to hide\n * @param {Bool} resetPreferences\n * @return {Promise} Resolved with requested table view\n */\nconst fetchTableContent = (component, handler, uniqueid, {\n    sortData = [],\n    joinType = null,\n    filters = {},\n    firstinitial = null,\n    lastinitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = {}\n} = {}, resetPreferences = false) => {\n    return fetchMany([{\n        methodname: `cltools_table_get_dynamic_table_content`,\n        args: {\n            component,\n            handler,\n            uniqueid,\n            sortdata: sortData,\n            jointype: joinType,\n            filters,\n            firstinitial,\n            lastinitial,\n            pagenumber: pageNumber,\n            pagesize: pageSize,\n            hiddencolumns: hiddenColumns,\n            resetpreferences: resetPreferences\n        },\n    }])[0];\n};\n\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @param {Bool} resetContent\n * @returns {Promise}\n */\nconst refreshTableContent = (tableRoot, resetContent = false) => {\n    const filterset = getFiltersetFromTable(tableRoot);\n    addIconToContainer(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\n\n    return fetchTableContent(\n        tableRoot.dataset.tableComponent,\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n            firstinitial: tableRoot.dataset.tableFirstInitial,\n            lastinitial: tableRoot.dataset.tableLastInitial,\n            pageNumber: tableRoot.dataset.tablePageNumber,\n            pageSize: tableRoot.dataset.tablePageSize,\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\n        },\n        resetContent,\n    )\n        .then(data => {\n            const placeholder = document.createElement('div');\n            placeholder.innerHTML = data.html;\n            tableRoot.replaceWith(...placeholder.childNodes);\n\n            // Update the tableRoot.\n            return getTableFromId(tableRoot.dataset.tableUniqueid);\n        }).then(tableRoot => {\n            tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\n                bubbles: true,\n            }));\n\n            return tableRoot;\n        })\n        .then(tableRoot => {\n            pendingPromise.resolve();\n\n            return tableRoot;\n        });\n};\n\n/**\n * Ensure that a table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Bool}\n */\nconst checkTableIsDynamic = tableRoot => {\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    if (!tableRoot.matches(Selectors.main.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return true;\n};\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\nexport const updateTable = (tableRoot, {\n    sortBy = null,\n    sortOrder = null,\n    filters = null,\n    firstInitial = null,\n    lastInitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = null,\n} = {}, refreshContent = true) => {\n    checkTableIsDynamic(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\n    let tableConfigChanged = false;\n\n    // Update sort fields.\n    if (sortBy && sortOrder) {\n        // Always update the table if requested and there were sort fields.\n        // These fields are only ever normalised in the backend.\n        tableConfigChanged = true;\n\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\n        sortData.unshift({\n            sortby: sortBy,\n            sortorder: parseInt(sortOrder, 10),\n        });\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\n    }\n\n    // Update initials.\n    if (firstInitial !== null) {\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFirstInitial = firstInitial;\n    }\n\n    if (lastInitial !== null) {\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableLastInitial = lastInitial;\n    }\n\n    if (pageSize !== null) {\n        if (tableRoot.dataset.tablePageSize != pageSize) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageSize = pageSize;\n    }\n\n    // Update filters.\n    if (filters) {\n        const filterJson = JSON.stringify(filters);\n\n        if (tableRoot.dataset.tableFilters !== filterJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFilters = filterJson;\n    }\n\n    // Reset to page 1 when table content is being altered by filtering or sorting.\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\n    if (tableConfigChanged) {\n        pageNumber = 1;\n    }\n\n    // Update hidden columns.\n    if (hiddenColumns) {\n        const columnJson = JSON.stringify(hiddenColumns);\n\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableHiddenColumns = columnJson;\n    }\n\n    if (pageNumber !== null) {\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageNumber = pageNumber;\n    }\n\n    // Refresh.\n    if (refreshContent && tableConfigChanged) {\n        return refreshTableContent(tableRoot)\n            .then(tableRoot => {\n                pendingPromise.resolve();\n                return tableRoot;\n            });\n    } else {\n        pendingPromise.resolve();\n        return Promise.resolve(tableRoot);\n    }\n};\n\n/**\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {DOMStringMap}\n */\nconst getTableData = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return tableRoot.dataset;\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\n    updateTable(tableRoot, {filters}, refreshContent);\n\n/**\n * Get the filter data for the specified table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nexport const getFilters = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return getFiltersetFromTable(tableRoot);\n};\n\n/**\n * Update the sort order.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} sortBy\n * @param {Number} sortOrder\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\n\n/**\n * Set the page number.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} pageNumber\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\n    updateTable(tableRoot, {pageNumber}, refreshContent);\n\n/**\n * Get the current page number.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\n\n/**\n * Set the page size.\n *\n * @param {HTMLElement} tableRoot\n * @param {Number} pageSize\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\n\n/**\n * Get the current page size.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\n\n/**\n * Update the first initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} firstInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\n    updateTable(tableRoot, {firstInitial}, refreshContent);\n\n/**\n * Get the current first initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\n\n/**\n * Update the last initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} lastInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\n    updateTable(tableRoot, {lastInitial}, refreshContent);\n\n/**\n * Get the current last initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\n\n/**\n * Hide a column in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToHide\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns.push(columnToHide);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Make a hidden column visible in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToShow\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Reset table preferences.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    if (watching) {\n        // Already watching.\n        return;\n    }\n    watching = true;\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.main.region);\n\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\n        if (sortableLink) {\n            e.preventDefault();\n\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\n                .catch(Notification.exception);\n        }\n\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\n        if (firstInitialLink !== null) {\n            e.preventDefault();\n\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\n        if (lastInitialLink !== null) {\n            e.preventDefault();\n\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\n        if (pageItem) {\n            e.preventDefault();\n\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\n        }\n\n        const hide = e.target.closest(Selectors.table.links.hide);\n        if (hide) {\n            e.preventDefault();\n\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\n        }\n\n        const show = e.target.closest(Selectors.table.links.show);\n        if (show) {\n            e.preventDefault();\n\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\n        }\n\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\n        if (resetTablePreferencesLink) {\n            e.preventDefault();\n\n            resetTablePreferences(tableRoot).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Fetch the table via its table region id.\n *\n * @param {String} tableRegionId\n * @returns {HTMLElement}\n */\nexport const getTableFromId = tableRegionId => {\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\n\n\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return tableRoot;\n};\n\nexport {\n    Events\n};\n"],"file":"entity_dynamic_table.min.js"}