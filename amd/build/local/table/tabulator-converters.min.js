define("local_cltools/local/table/tabulator-converters",["exports","./tabulator-edition","./tabulator-entity-lookup","./tabulator-generic-lookup"],(function(_exports,_tabulatorEdition,_tabulatorEntityLookup,_tabulatorGenericLookup){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.columnSetup=void 0;_exports.columnSetup=async(columndefs,tableHandler,tableHandlerParams,tableUniqueId)=>{const TABULATOR_CONVERTER={formatter:{},filter:{select:{transformer:coldef=>(coldef.headerFilterFunc="=",coldef)},entity_lookup:{to:"autocomplete",transformer:coldef=>{const entityClass=coldef.filterParams.entityclass,displayField=coldef.filterParams.displayfield;return coldef.filterParams={values:(0,_tabulatorEntityLookup.entityLookup)(entityClass,displayField),allowEmpty:!0,showListOnEmpty:!0},coldef.headerFilterFunc="=",coldef}},generic_lookup:{to:"autocomplete",transformer:coldef=>(coldef.filterParams={values:(0,_tabulatorGenericLookup.genericLookup)(coldef.filterParams.type),allowEmpty:!0,showListOnEmpty:!0},coldef.headerFilterFunc="=",coldef)}},validator:{remote:{to:(cell,value)=>(0,_tabulatorEdition.validateRemote)(cell,value,tableHandler,tableHandlerParams,tableUniqueId)}},editor:{}};for await(const columndef of columndefs)for(const colprop in columndef)if(colprop in TABULATOR_CONVERTER){if(colprop+"Params"in columndef&&(columndef[colprop+"Params"]=JSON.parse(columndef[colprop+"Params"])),"entity_lookup"===columndef[colprop]){const params=columndef[colprop+"Params"];await(0,_tabulatorEntityLookup.prepareEntityLookup)(params.entityclass,params.displayfield)}if("generic_lookup"===columndef[colprop]){const params=columndef[colprop+"Params"];await(0,_tabulatorGenericLookup.prepareGenericLookup)(params.type)}}return columndefs=columndefs.map((columndef=>{if("additionalParams"in columndef){const additionalProps=JSON.parse(columndef.additionalParams);"object"==typeof additionalProps&&delete(columndef=Object.assign(columndef,additionalProps)).additionalParameters}for(const colprop in columndef)if(colprop in TABULATOR_CONVERTER){const tabconverter=TABULATOR_CONVERTER[colprop];if(columndef[colprop]in tabconverter){const converter=tabconverter[columndef[colprop]];converter.to&&(columndef[colprop]=converter.to),converter.transformer&&(columndef=converter.transformer(columndef))}}return columndef.filter&&(columndef.headerFilter=columndef.filter),columndef.filterParams&&(columndef.headerFilterParams=columndef.filterParams),columndef}))}}));

//# sourceMappingURL=tabulator-converters.min.js.map