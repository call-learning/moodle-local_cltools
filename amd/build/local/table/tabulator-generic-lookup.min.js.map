{"version":3,"file":"tabulator-generic-lookup.min.js","sources":["../../../src/local/table/tabulator-generic-lookup.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module to store the moodle entity lookup values (non persistent, just straight tables)\n *\n * @module   local_cltools/table/tabulator-entity-lookup.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {genericTableLookup} from \"./repository\";\n\nconst GENERIC_LOOKUP_PREFIX = \"genericLookup\";\n/**\n * Compute Prefix\n * @param {string} mtype\n */\nconst computePrefix = (mtype) => GENERIC_LOOKUP_PREFIX + \"_\" + mtype;\n/**\n * Moodle Entity Lookup\n * @param {string} mtype\n * @return {Array}\n */\nexport const genericLookup = (mtype) => {\n    const values = sessionStorage.getItem(computePrefix(mtype));\n    return values ? JSON.parse(values) : [];\n};\n\n/**\n * Moodle Entity Lookup preparation\n * @param {string} mtype\n */\nexport const prepareGenericLookup = async (mtype) => {\n    window.onbeforeunload = () => {\n        sessionStorage.removeItem(computePrefix(mtype));\n    };\n    const lookupValues = await genericTableLookup({\n        type: mtype,\n    }).catch(Notification.exception)\n        .then(\n            (result) => {\n                if (result.warnings && result.warnings.length !== 0) {\n                    Notification.addNotification(\n                        {\n                            message: result.warnings.reduce((a, w) => (a + ' ' + w.message), '')\n                        }\n                    );\n                    return [];\n                }\n                return Object.fromEntries(result.values.map(({id, value}) => ([id, value])));\n            });\n    sessionStorage.setItem(computePrefix(mtype), JSON.stringify(lookupValues));\n};\n"],"names":["computePrefix","mtype","GENERIC_LOOKUP_PREFIX","values","sessionStorage","getItem","JSON","parse","prepareGenericLookup","window","onbeforeunload","removeItem","type","catch","Notification","exception","then","result","warnings","length","addNotification","message","reduce","a","w","Object","fromEntries","map","id","value","lookupValues","setItem","stringify"],"mappings":"wjBA8BMA,cAAgB,SAACC,aAAUC,iBAA8BD,8BAMlC,SAACA,WACpBE,OAASC,eAAeC,QAAQL,cAAcC,eAC7CE,OAASG,KAAKC,MAAMJ,QAAU,gBAO5BK,kDAAuB,iBAAOP,oIACvCQ,OAAOC,eAAiB,WACpBN,eAAeO,WAAWX,cAAcC,0BAEjB,kCAAmB,CAC1CW,KAAMX,QACPY,MAAMC,sBAAaC,WACjBC,MACG,SAACC,eACOA,OAAOC,UAAuC,IAA3BD,OAAOC,SAASC,8BACtBC,gBACT,CACIC,QAASJ,OAAOC,SAASI,QAAO,SAACC,EAAGC,UAAOD,EAAI,IAAMC,EAAEH,UAAU,MAGlE,IAEJI,OAAOC,YAAYT,OAAOd,OAAOwB,KAAI,sBAAkB,OAAhBC,SAAIC,qBAbxDC,2BAeN1B,eAAe2B,QAAQ/B,cAAcC,OAAQK,KAAK0B,UAAUF"}