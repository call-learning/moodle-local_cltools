{"version":3,"file":"moodle-filter-converters.min.js","sources":["../../../src/local/table/moodle-filter-converters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module to convert between Moodle filters and Tabulator filters.\n *\n * @module   local_cltools/table/dynamic.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nconst toNumericEqual = (val) => JSON.stringify({\n    direction: '=',\n    value: val,\n});\n\nconst MOODLE_FILTER_CONVERTER = {\n    'like': {\n        to: 'string_filter',\n        transformer: (args) => {\n            return {value: args};\n        }\n    },\n    '=': {\n        to: 'numeric_comparison_filter',\n        transformer: (args) => {\n            if (Array.isArray(args)) {\n                return args.map(toNumericEqual);\n            } else if (typeof args === 'boolean') {\n                return [toNumericEqual(args ? 1 : 0)];\n            } else {\n                return [toNumericEqual(args)];\n            }\n        }\n    }\n};\n\nexport const JOINTYPE_ANY = 1;\nexport const JOINTYPE_ALL = 2;\n\nexport const convertInitialFilter = (initialFilters, existingFilters) => {\n    const joinType = initialFilters ? initialFilters.jointype : JOINTYPE_ALL;\n    if (initialFilters) {\n        // Add initial filters to filters.\n        Array.prototype.push.apply(existingFilters, Object.values(initialFilters.filters));\n    }\n    return [joinType, existingFilters];\n};\n\nexport const convertFiltersToMoodle = (tabulatorFilters) => {\n    return (typeof tabulatorFilters === \"undefined\") ? [] : tabulatorFilters.map(\n        (e) => {\n            let filter = {\n                'name': e.field, 'type': e.type, 'jointype': JOINTYPE_ALL, 'values': e.value\n            };\n            if (e.type in MOODLE_FILTER_CONVERTER) {\n                const converter = MOODLE_FILTER_CONVERTER[e.type];\n                filter.type = converter.to;\n                if (typeof converter.transformer !== \"undefined\") {\n                    filter.values = converter.transformer(e.value);\n                }\n            }\n            return filter;\n        }\n    );\n};\n"],"names":["toNumericEqual","val","JSON","stringify","direction","value","MOODLE_FILTER_CONVERTER","to","transformer","args","Array","isArray","map","initialFilters","existingFilters","joinType","jointype","prototype","push","apply","Object","values","filters","tabulatorFilters","e","filter","field","type","converter"],"mappings":";;;;;;;;MAwBMA,eAAkBC,KAAQC,KAAKC,UAAU,CAC3CC,UAAW,IACXC,MAAOJ,MAGLK,wBAA0B,MACpB,CACJC,GAAI,gBACJC,YAAcC,OACH,CAACJ,MAAOI,YAGlB,CACDF,GAAI,4BACJC,YAAcC,MACNC,MAAMC,QAAQF,MACPA,KAAKG,IAAIZ,gBACO,kBAATS,KACP,CAACT,eAAeS,KAAO,EAAI,IAE3B,CAACT,eAAeS,+BAMX,wBACA,gCAEQ,CAACI,eAAgBC,yBAC3CC,SAAWF,eAAiBA,eAAeG,SAHzB,SAIpBH,gBAEAH,MAAMO,UAAUC,KAAKC,MAAML,gBAAiBM,OAAOC,OAAOR,eAAeS,UAEtE,CAACP,SAAUD,kDAGiBS,uBACC,IAArBA,iBAAoC,GAAKA,iBAAiBX,KACpEY,QACOC,OAAS,MACDD,EAAEE,WAAeF,EAAEG,cAff,SAeyDH,EAAEnB,UAEvEmB,EAAEG,QAAQrB,wBAAyB,OAC7BsB,UAAYtB,wBAAwBkB,EAAEG,MAC5CF,OAAOE,KAAOC,UAAUrB,QACa,IAA1BqB,UAAUpB,cACjBiB,OAAOJ,OAASO,UAAUpB,YAAYgB,EAAEnB,eAGzCoB"}