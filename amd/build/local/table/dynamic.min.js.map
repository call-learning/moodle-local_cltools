{"version":3,"file":"dynamic.min.js","sources":["../../../src/local/table/dynamic.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module to create a dynamic table a bit similar to the core\n * dynamic table but with more functionalities.\n * We use the Tabulator library.\n *\n * @module   local_cltools/table/dynamic.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Tabulator from 'local_cltools/local/table/tabulator-lazy';\nimport moment from 'local_cltools/local/moment-lazy';\nimport $ from 'jquery';\nimport {call as ajaxCall} from 'core/ajax';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {columnSetup} from './tabulator-converters';\nimport {cellEdited} from './tabulator-edition';\nimport {convertFiltersToMoodle, convertInitialFilter} from './moodle-filter-converters';\nimport {TABULATOR_FORMATTERS} from \"./tabulator-formatters\";\nimport {TABULATOR_EDITORS} from \"./tabulator-editors\";\n\n\nconst rowQuery = (tableHandler, tableHandlerParams, tableUniqueid, pageSize, params, initialFilters, tableEditable) => {\n    let joinType;\n    let filters = convertFiltersToMoodle(params.filters);\n    [joinType, filters] = convertInitialFilter(initialFilters, filters);\n    const args = {\n        handler: tableHandler,\n        handlerparams: tableHandlerParams,\n        uniqueid: tableUniqueid,\n        sortdata: (typeof params.sorters === \"undefined\") ? [] : params.sorters.map(\n            (e) => {\n                return {'sortby': e.field, 'sortorder': e.dir.toUpperCase()};\n            }\n        ),\n        filters: filters,\n        jointype: joinType,\n        pagenumber: params.page,\n        pagesize: pageSize,\n        hiddencolumns: [],\n        editable: tableEditable\n    };\n    return Promise.race(\n        ajaxCall(\n            [{\n                methodname: 'cltools_dynamic_table_get_rows',\n                args: args\n            }]\n        )\n    ).catch(Notification.exception);\n};\n\nconst ajaxResponseProcessor = function (url, params, response) {\n    response.data = response.data.map(\n        (rowstring) => JSON.parse(rowstring)\n    );\n    return response;\n};\n\nexport const init = async (tabulatorelementid) => {\n    const tableelement = $(\"#\" + tabulatorelementid);\n    const rowClickCallback = (e, row) => {\n        $(document).trigger('tabulator-row-click', [row, tableelement.data('tableUniqueid')]);\n    };\n    tableInit(\"#\" + tabulatorelementid,\n        tableelement.data('tableHandler'),\n        tableelement.data('tableHandlerParams'),\n        tableelement.data('tableUniqueid'),\n        tableelement.data('tablePagesize'),\n        tableelement.data('tableFilters'),\n        rowClickCallback,\n        tableelement.data('tableOtheroptions'),\n        tableelement.data('tableEditable'),\n    );\n};\nexport const tableInit = async (\n    tableElement,\n    tableHandler,\n    tableHandlerParams,\n    tableUniqueId,\n    tablePageSize,\n    tableFilters,\n    rowClickCallback,\n    otherOptions,\n    tableEditable\n) => {\n    let joinType, filters;\n    // Make sure momentjs is defined.\n    if (typeof window.moment == \"undefined\") {\n        window.moment = moment;\n    }\n    const placeHolderMessage = await getString('table:nodata', 'local_cltools');\n    [joinType, filters] = convertInitialFilter(tableFilters, []);\n    let columns = await Promise.race(ajaxCall(\n        [{\n            methodname: 'cltools_dynamic_table_get_columns',\n            args: {\n                handler: tableHandler,\n                handlerparams: tableHandlerParams,\n                uniqueid: tableUniqueId,\n                filters: filters,\n                jointype: joinType,\n                editable: tableEditable\n            }\n        }])).catch(Notification.exception);\n\n\n    Tabulator.prototype.extendModule(\"format\", \"formatters\", TABULATOR_FORMATTERS);\n    Tabulator.prototype.extendModule(\"edit\", \"editors\", TABULATOR_EDITORS);\n\n    columns = await columnSetup(columns, tableHandler, tableHandlerParams, tableUniqueId);\n\n    let options = {\n        ajaxRequestFunc: function (url, config, params) {\n            const pageSize = this.table.getPageSize();\n            return rowQuery(tableHandler, tableHandlerParams, tableUniqueId, pageSize, params, tableFilters, tableEditable);\n        },\n        ajaxURL: true, // If not set the RequestFunct will never be called.\n        pagination: \"remote\",\n        paginationSize: tablePageSize,\n        ajaxFiltering: true,\n        ajaxSorting: true,\n        dataFiltered: function () {\n            $(document).trigger('tabulator-filter-changed', [\n                    tableHandler, tableHandlerParams, tableUniqueId, this.getFilters(true)\n                ]\n            );\n        },\n        paginationDataReceived: {\n            \"last_page\": \"pagescount\", // Change last_page parameter name to \"pagescount\".\n        },\n        ajaxResponse: ajaxResponseProcessor,\n        cellEdited: function (data) {\n            cellEdited(tableHandler, tableHandlerParams, tableUniqueId, data);\n        },\n        validationMode: \"highlight\",\n        columns: columns,\n        layout: \"fitColumns\",\n        placeholder: placeHolderMessage,\n        rowClick: rowClickCallback ? rowClickCallback : () => null\n    };\n    if (typeof otherOptions === 'object' && otherOptions !== null) {\n        Object.assign(options, otherOptions);\n    }\n    new Tabulator(tableElement, options);\n};"],"names":["rowQuery","tableHandler","tableHandlerParams","tableUniqueid","pageSize","params","initialFilters","tableEditable","joinType","filters","args","handler","handlerparams","uniqueid","sortdata","sorters","map","e","field","dir","toUpperCase","jointype","pagenumber","page","pagesize","hiddencolumns","editable","Promise","race","methodname","catch","Notification","exception","ajaxResponseProcessor","url","response","data","rowstring","JSON","parse","init","tabulatorelementid","tableelement","rowClickCallback","row","document","trigger","tableInit","tableElement","tableUniqueId","tablePageSize","tableFilters","otherOptions","window","moment","placeHolderMessage","columns","prototype","extendModule","TABULATOR_FORMATTERS","TABULATOR_EDITORS","options","ajaxRequestFunc","config","this","table","getPageSize","ajaxURL","pagination","paginationSize","ajaxFiltering","ajaxSorting","dataFiltered","getFilters","paginationDataReceived","ajaxResponse","cellEdited","validationMode","layout","placeholder","rowClick","_typeof","Object","assign","Tabulator"],"mappings":"qxFAqCMA,SAAW,SAACC,aAAcC,mBAAoBC,cAAeC,SAAUC,OAAQC,eAAgBC,mBAC7FC,SACAC,SAAU,kDAAuBJ,OAAOI,gDACtB,gDAAqBH,eAAgBG,YAA1DD,mCAAUC,sCACLC,KAAO,CACTC,QAASV,aACTW,cAAeV,mBACfW,SAAUV,cACVW,cAAqC,IAAnBT,OAAOU,QAA2B,GAAKV,OAAOU,QAAQC,KACpE,SAACC,SACU,QAAWA,EAAEC,gBAAoBD,EAAEE,IAAIC,kBAGtDX,QAASA,QACTY,SAAUb,SACVc,WAAYjB,OAAOkB,KACnBC,SAAUpB,SACVqB,cAAe,GACfC,SAAUnB,sBAEPoB,QAAQC,MACX,cACI,CAAC,CACGC,WAAY,iCACZnB,KAAMA,SAGhBoB,MAAMC,sBAAaC,YAGnBC,sBAAwB,SAAUC,IAAK7B,OAAQ8B,iBACjDA,SAASC,KAAOD,SAASC,KAAKpB,KAC1B,SAACqB,kBAAcC,KAAKC,MAAMF,cAEvBF,UAGEK,sDAAO,iBAAOC,2JACjBC,cAAe,mBAAE,IAAMD,oBACvBE,iBAAmB,SAAC1B,EAAG2B,yBACvBC,UAAUC,QAAQ,sBAAuB,CAACF,IAAKF,aAAaN,KAAK,oBAEvEW,UAAU,IAAMN,mBACZC,aAAaN,KAAK,gBAClBM,aAAaN,KAAK,sBAClBM,aAAaN,KAAK,iBAClBM,aAAaN,KAAK,iBAClBM,aAAaN,KAAK,gBAClBO,iBACAD,aAAaN,KAAK,qBAClBM,aAAaN,KAAK,wJAGbW,4DAAY,kBACrBC,aACA/C,aACAC,mBACA+C,cACAC,cACAC,aACAR,iBACAS,aACA7C,yOAI4B,IAAjB8C,OAAOC,SACdD,OAAOC,OAASA,uCAEa,mBAAU,eAAgB,+BAArDC,0DACgB,gDAAqBJ,aAAc,oEAAxD3C,mCAAUC,oDACSkB,QAAQC,MAAK,cAC7B,CAAC,CACGC,WAAY,oCACZnB,KAAM,CACFC,QAASV,aACTW,cAAeV,mBACfW,SAAUoC,cACVxC,QAASA,QACTY,SAAUb,SACVkB,SAAUnB,mBAEbuB,MAAMC,sBAAaC,0BAXxBwB,8CAcMC,UAAUC,aAAa,SAAU,aAAcC,kEAC/CF,UAAUC,aAAa,OAAQ,UAAWE,wDAEpC,oCAAYJ,QAASvD,aAAcC,mBAAoB+C,uBAAvEO,uBAEIK,QAAU,CACVC,gBAAiB,SAAU5B,IAAK6B,OAAQ1D,YAC9BD,SAAW4D,KAAKC,MAAMC,qBACrBlE,SAASC,aAAcC,mBAAoB+C,cAAe7C,SAAUC,OAAQ8C,aAAc5C,gBAErG4D,SAAS,EACTC,WAAY,SACZC,eAAgBnB,cAChBoB,eAAe,EACfC,aAAa,EACbC,aAAc,+BACR3B,UAAUC,QAAQ,2BAA4B,CACxC7C,aAAcC,mBAAoB+C,cAAee,KAAKS,YAAW,MAI7EC,uBAAwB,WACP,cAEjBC,aAAc1C,sBACd2C,WAAY,SAAUxC,uCACPnC,aAAcC,mBAAoB+C,cAAeb,OAEhEyC,eAAgB,YAChBrB,QAASA,QACTsB,OAAQ,aACRC,YAAaxB,mBACbyB,SAAUrC,kBAAsC,kBAAM,OAE9B,WAAxBsC,QAAO7B,eAA8C,OAAjBA,cACpC8B,OAAOC,OAAOtB,QAAST,kBAEvBgC,uBAAUpC,aAAca"}