{"version":3,"sources":["../../../src/local/table/dynamic.js"],"names":["init","tabulatorelementid","tableelement","rowQuery","url","config","params","args","handler","data","uniqueid","sortdata","sorters","map","e","name","filters","values","jointype","pagenumber","page","pagesize","table","getPageSize","hiddencolumns","resetpreferences","firstinitial","lastinitial","promise","methodname","ajaxResponseProcessor","response","rowstring","JSON","parse","then","Tabulator","ajaxRequestFunc","ajaxURL","pagination","paginationSize","ajaxFiltering","ajaxSorting","paginationDataReceived","ajaxResponse","columns","fail","Notification","exception"],"mappings":"sNAAA,OACA,O,mDAGO,GAAMA,CAAAA,CAAI,CAAG,SAACC,CAAD,CAAwB,IAClCC,CAAAA,CAAY,CAAG,cAAE,IAAMD,CAAR,CADmB,CAGlCE,CAAQ,CAAG,SAAUC,CAAV,CAAeC,CAAf,CAAuBC,CAAvB,CAA+B,IACtCC,CAAAA,CAAI,CAAG,CACTC,OAAO,CAAEN,CAAY,CAACO,IAAb,CAAkB,cAAlB,CADA,CAETC,QAAQ,CAAER,CAAY,CAACO,IAAb,CAAkB,eAAlB,CAFD,CAGTE,QAAQ,CAA6B,WAA1B,QAAOL,CAAAA,CAAM,CAACM,OAAf,CAA0C,EAA1C,CAA+CN,CAAM,CAACM,OAAP,CAAeC,GAAf,CACrD,SAACC,CAAD,CAAO,CACH,MAAO,CAAC,OAAUA,CAAC,CAACC,IAAb,CAAmB,UAAa,KAAhC,CACV,CAHoD,CAHhD,CAQTC,OAAO,CAA6B,WAA1B,QAAOV,CAAAA,CAAM,CAACU,OAAf,CAA0C,EAA1C,CAA+CV,CAAM,CAACU,OAAP,CAAeH,GAAf,CACpD,SAACC,CAAD,CAAO,CACH,MAAO,CAAC,KAAQA,CAAC,CAACC,IAAX,CAAiB,SAAY,CAA7B,CAAgC,OAAUD,CAAC,CAACG,MAA5C,CACV,CAHmD,CAR/C,CAaTC,QAAQ,CAAE,CAbD,CAcTC,UAAU,CAAEb,CAAM,CAACc,IAdV,CAeTC,QAAQ,CAAE,KAAKC,KAAL,CAAWC,WAAX,EAfD,CAgBTC,aAAa,CAAE,EAhBN,CAiBTC,gBAAgB,GAjBP,CAkBTC,YAAY,CAAE,GAlBL,CAmBTC,WAAW,CAAE,GAnBJ,CAD+B,CAsBtCC,CAAO,CAAG,WACZ,CAAC,CACGC,UAAU,CAAE,gCADf,CAEGtB,IAAI,CAAEA,CAFT,CAAD,CADY,CAtB4B,CA4B5C,MAAOqB,CAAAA,CAAO,CAAC,CAAD,CACjB,CAhCuC,CAiClCE,CAAqB,CAAG,SAAU1B,CAAV,CAAeE,CAAf,CAAuByB,CAAvB,CAAkC,CAC5DA,CAAQ,CAACtB,IAAT,CAAgBsB,CAAQ,CAACtB,IAAT,CAAcI,GAAd,CACZ,SAACmB,CAAD,QAAeC,CAAAA,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAf,CADY,CAAhB,CAGA,MAAOD,CAAAA,CACV,CAtCuC,CAuClCH,CAAO,CAAG,WACZ,CAAC,CACGC,UAAU,CAAE,mCADf,CAEGtB,IAAI,CAAE,CACFC,OAAO,CAAEN,CAAY,CAACO,IAAb,CAAkB,cAAlB,CADP,CAEFC,QAAQ,CAAER,CAAY,CAACO,IAAb,CAAkB,eAAlB,CAFR,CAFT,CAAD,CADY,CAvCwB,CAgDxCmB,CAAO,CAAC,CAAD,CAAP,CAAWO,IAAX,CACI,SAAC1B,CAAD,CAAU,CACN,GAAI2B,UAAJ,CAAc,IAAMnC,CAApB,CAAwC,CACpCoC,eAAe,CAAElC,CADmB,CAEpCmC,OAAO,GAF6B,CAGpCC,UAAU,CAAE,QAHwB,CAIpCC,cAAc,CAAEtC,CAAY,CAACO,IAAb,CAAkB,gBAAlB,CAJoB,CAKpCgC,aAAa,GALuB,CAMpCC,WAAW,GANyB,CAOpCC,sBAAsB,CAAC,CACnB,UAAY,YADO,CAPa,CAUpCC,YAAY,CAAEd,CAVsB,CAWpCe,OAAO,CAAEpC,CAX2B,CAAxC,CAaH,CAfL,EAgBEqC,IAhBF,CAgBOC,YAAY,CAACC,SAhBpB,CAiBH,CAjEM,C","sourcesContent":["import Tabulator from 'local_cltools/local/table/tabulator-lazy';\nimport $ from 'jquery';\nimport {call as ajaxCall} from 'core/ajax';\n\nexport const init = (tabulatorelementid) => {\n    const tableelement = $(\"#\" + tabulatorelementid);\n    /*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n    const rowQuery = function (url, config, params) {\n        const args = {\n            handler: tableelement.data('tableHandler'),\n            uniqueid: tableelement.data('tableUniqueid'),\n            sortdata: (typeof params.sorters === \"undefined\") ? [] : params.sorters.map(\n                (e) => {\n                    return {'sortby': e.name, 'sortorder': 'ASC'};\n                }\n            ),\n            filters: (typeof params.filters === \"undefined\") ? [] : params.filters.map(\n                (e) => {\n                    return {'name': e.name, 'jointype': 1, 'values': e.values};\n                }\n            ),\n            jointype: 1,\n            pagenumber: params.page,\n            pagesize: this.table.getPageSize(),\n            hiddencolumns: [],\n            resetpreferences: false,\n            firstinitial: \"A\",\n            lastinitial: \"Z\"\n        };\n        const promise = ajaxCall(\n            [{\n                methodname: 'cltools_dynamic_table_get_rows',\n                args: args\n            }]\n        );\n        return promise[0];\n    };\n    const ajaxResponseProcessor = function (url, params, response ) {\n        response.data = response.data.map(\n            (rowstring) => JSON.parse(rowstring)\n        );\n        return response;\n    };\n    const promise = ajaxCall(\n        [{\n            methodname: 'cltools_dynamic_table_get_columns',\n            args: {\n                handler: tableelement.data('tableHandler'),\n                uniqueid: tableelement.data('tableUniqueid'),\n            }\n        }]\n    );\n    promise[0].then(\n        (data) => {\n            new Tabulator(\"#\" + tabulatorelementid, {\n                ajaxRequestFunc: rowQuery,\n                ajaxURL: true, // If not set the RequestFunct will never be called.\n                pagination: \"remote\",\n                paginationSize: tableelement.data('table-pagesize'),\n                ajaxFiltering: true,\n                ajaxSorting: true,\n                paginationDataReceived:{\n                    \"last_page\":\"pagescount\", //change last_page parameter name to \"pagescount\"\n                },\n                ajaxResponse: ajaxResponseProcessor,\n                columns: data\n            });\n        }\n    ).fail(Notification.exception);\n};"],"file":"dynamic.min.js"}