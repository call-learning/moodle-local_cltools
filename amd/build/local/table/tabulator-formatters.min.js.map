{"version":3,"file":"tabulator-formatters.min.js","sources":["../../../src/local/table/tabulator-formatters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module defining new Tabulator formatters\n *\n * @module   local_cltools/table/tabulator-formatter.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport moment from 'local_cltools/local/moment-lazy';\nimport {entityLookup} from \"./tabulator-entity-lookup\";\nimport {genericLookup} from \"./tabulator-generic-lookup\";\n\nexport const TABULATOR_FORMATTERS = {\n    uppercase: function(cell) {\n        return cell.getValue().toUpperCase();\n    },\n    datets: function(cell, params) {\n        if (cell.getValue() == 0) {\n            return '';\n        }\n        const formatterParams = params.formatterParams;\n        const currentLang = formatterParams.locale ? formatterParams.locale : 'en';\n        moment.locale(currentLang);\n        return moment.unix(cell.getValue()).format(formatterParams.outputFormat);\n        // From Unix TS to displayable date.\n    },\n    datetimets: function(cell, params) {\n        if (cell.getValue() == 0) {\n            return '';\n        }\n        const formatterParams = params.formatterParams;\n        const currentLang = formatterParams.locale ? formatterParams.locale : 'en';\n        const timestamp = Number.parseInt(cell.getValue());\n        moment.locale(currentLang);\n        return moment.unix(timestamp).format(formatterParams.outputFormat); // From Unix TS to displayable date.\n    },\n    'entity_lookup': (cell, formatterParams) => {\n        const lookup = entityLookup(formatterParams.entityclass, formatterParams.displayfield);\n        const value = cell.getValue();\n        return lookup[value];\n    },\n    'generic_lookup': (cell, formatterParams) => {\n        const lookup = genericLookup(formatterParams.type);\n        const value = cell.getValue();\n        return lookup[value];\n    },\n};"],"names":["TABULATOR_FORMATTERS","uppercase","cell","getValue","toUpperCase","datets","params","formatterParams","currentLang","locale","moment","unix","format","outputFormat","datetimets","timestamp","Number","parseInt","entityclass","displayfield","type"],"mappings":";;;;;;;sKAyBaA,qBAAuB,CAChCC,UAAW,SAASC,aACTA,KAAKC,WAAWC,eAE3BC,OAAQ,SAASH,KAAMI,WACI,GAAnBJ,KAAKC,iBACE,OAELI,gBAAkBD,OAAOC,gBACzBC,YAAcD,gBAAgBE,OAASF,gBAAgBE,OAAS,gCAC/DA,OAAOD,aACPE,oBAAOC,KAAKT,KAAKC,YAAYS,OAAOL,gBAAgBM,eAG/DC,WAAY,SAASZ,KAAMI,WACA,GAAnBJ,KAAKC,iBACE,OAELI,gBAAkBD,OAAOC,gBACzBC,YAAcD,gBAAgBE,OAASF,gBAAgBE,OAAS,KAChEM,UAAYC,OAAOC,SAASf,KAAKC,uCAChCM,OAAOD,aACPE,oBAAOC,KAAKI,WAAWH,OAAOL,gBAAgBM,6BAExC,SAACX,KAAMK,wBACL,uCAAaA,gBAAgBW,YAAaX,gBAAgBY,cAC3DjB,KAAKC,4BAGL,SAACD,KAAMK,wBACN,yCAAcA,gBAAgBa,MAC/BlB,KAAKC"}