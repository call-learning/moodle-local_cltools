{"version":3,"file":"repository.min.js","sources":["../../../src/local/table/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Repository to perform WS calls for local_ctools.\n *\n * @module      local_cltools/table//repository\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n * Get all rows from a dynamic table\n *\n * @param   {object} args\n * @returns {Promise}\n */\nexport const getTableRows = args => fetchMany([{ methodname: 'cltools_dynamic_table_get_rows',args}])[0];\n\n/**\n * Get all columns from a dynamic table\n *\n * @param   {object} args\n * @returns {Promise}\n */\nexport const getTableColumns = args => fetchMany([{ methodname: 'cltools_dynamic_table_get_columns',args}])[0];\n\n/**\n * Set a value from a table\n *\n * @param   {object} args\n * @returns {Promise}\n */\nexport const setTableValue = args => fetchMany([{ methodname: 'cltools_dynamic_table_set_value',args}])[0];\n\n/**\n * Check if a value is valid\n *\n * @param   {object} args\n * @returns {Promise}\n */\nexport const validateTableValue = args => fetchMany([{ methodname: 'cltools_dynamic_table_validate_value',args}])[0];\n\n/**\n * Lookup values for an entity\n *\n * @param   {object} args\n * @returns {Promise}\n */\nexport const entityTableLookup = args => fetchMany([{ methodname: 'cltools_entity_lookup',args}])[0];\n\n/**\n * Lookup values for generic moodle entities such as users or courses\n *\n * @param   {object} args\n * @returns {Promise}\n */\nexport const genericTableLookup = args => fetchMany([{ methodname: 'cltools_generic_lookup',args}])[0];\n"],"names":["args","methodname"],"mappings":"8UA+B4B,SAAAA,aAAQ,cAAU,CAAC,CAAEC,WAAY,iCAAiCD,KAAAA,QAAQ,6BAQvE,SAAAA,aAAQ,cAAU,CAAC,CAAEC,WAAY,oCAAoCD,KAAAA,QAAQ,2BAQ/E,SAAAA,aAAQ,cAAU,CAAC,CAAEC,WAAY,kCAAkCD,KAAAA,QAAQ,gCAQtE,SAAAA,aAAQ,cAAU,CAAC,CAAEC,WAAY,uCAAuCD,KAAAA,QAAQ,+BAQjF,SAAAA,aAAQ,cAAU,CAAC,CAAEC,WAAY,wBAAwBD,KAAAA,QAAQ,gCAQhE,SAAAA,aAAQ,cAAU,CAAC,CAAEC,WAAY,yBAAyBD,KAAAA,QAAQ"}