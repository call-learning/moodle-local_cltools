{"version":3,"sources":["../../../src/local/table/tabulator-converters.js"],"names":["dateEditor","cell","onRendered","success","editor","document","createElement","setAttribute","style","padding","width","boxSizing","value","getValue","format","focus","css","successFunc","addEventListener","TABULATOR_FILTER_CONVERTER","to","transformer","args","values","choices","headerFilterFunc","outputformat","inputformat","timezone","TABULATOR_FORMATTER_CONVERTER","formatterFilterTransform","columndefs","map","columndef","formatterParams","JSON","parse","formatterparams","filterParams","filterparams","formatter","converter","headerFilter","filter","headerFilterParams"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module to convert between Moodle fields and format and Tabulator formats.\n *\n * @module   local_cltools/table/dynamic.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport moment from 'local_cltools/local/moment-lazy';\n\nconst dateEditor = (cell, onRendered, success) => {\n    // Create and style editor.\n    var editor = document.createElement(\"input\");\n\n    editor.setAttribute(\"type\", \"date\");\n\n    // Create and style input\n    editor.style.padding = \"3px\";\n    editor.style.width = \"100%\";\n    editor.style.boxSizing = \"border-box\";\n\n    // Set value of editor to the current value of the cell.\n    editor.value = moment(cell.getValue(), \"DD/MM/YYYY\").format(\"YYYY-MM-DD\");\n\n    // Set focus on the select box when the editor is selected (timeout allows for editor to be added to DOM)\n    onRendered(function() {\n        editor.focus();\n        editor.style.css = \"100%\";\n    });\n\n    // When the value has been set, trigger the cell to update\n    function successFunc() {\n        success(moment(editor.value, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\"));\n    }\n\n    editor.addEventListener(\"change\", successFunc);\n    editor.addEventListener(\"blur\", successFunc);\n\n    // Return the editor element\n    return editor;\n};\n\nconst TABULATOR_FILTER_CONVERTER = {\n    'text': {\n        to: 'input'\n    },\n    'select_choice': {\n        to: 'select',\n        transformer: (args) => {\n            return {values: args.choices};\n        },\n        headerFilterFunc: \"=\"\n    },\n    'entity_selector': {\n        to: 'select',\n        transformer: (args) => {\n            return {values: args.choices};\n        },\n        headerFilterFunc: \"=\"\n    },\n    'datetime': {\n        to: 'datetime',\n        transformer: (args) => {\n            return {\n                'outputFormat': args.outputformat,\n                'inputFormat': args.inputformat,\n                'timezone': args.timezone\n            };\n        },\n        editor: dateEditor\n    }\n};\nconst TABULATOR_FORMATTER_CONVERTER = {\n    'text': {\n        to: 'plaintext',\n    },\n    'number': {\n        to: 'plaintext',\n    },\n    'select_choice': {\n        to: 'lookup',\n        transformer: (args) => args.choices\n    },\n    'entity_selector': {\n        to: 'lookup',\n        transformer: (args) => args.choices\n    },\n    'datetime': {\n        to: 'datetimets',\n        transformer: (args) => {\n            return {\n                'outputFormat': args.outputformat,\n                'timezone': args.timezone\n            };\n        }\n    },\n    'date': {\n        to: 'datets',\n        transformer: (args) => {\n            return {\n                'outputFormat': args.outputformat,\n                'timezone': args.timezone\n            };\n        }\n    }\n};\n\nexport const formatterFilterTransform = (columndefs) => {\n    return columndefs.map(\n        (columndef) => {\n            const formatterParams = ('formatterparams' in columndef) ? JSON.parse(columndef.formatterparams) : null;\n            const filterParams = ('filterparams' in columndef) ? JSON.parse(columndef.filterparams) : null;\n            if (('formatter' in columndef) && (columndef.formatter in TABULATOR_FORMATTER_CONVERTER)) {\n                const converter = TABULATOR_FORMATTER_CONVERTER[columndef.formatter];\n                if (formatterParams) {\n                    columndef.formatterParams = converter.transformer(formatterParams);\n                }\n                columndef.formatter = converter.to;\n            }\n            if (('filter' in columndef)) {\n                columndef.headerFilter = columndef.filter;\n                if (columndef.filter in TABULATOR_FILTER_CONVERTER) {\n                    const converter = TABULATOR_FILTER_CONVERTER[columndef.filter];\n                    if (filterParams) {\n                        columndef.headerFilterParams = converter.transformer(filterParams);\n                    }\n                    columndef.headerFilter = converter.to;\n                    if ('editor' in converter) {\n                        columndef.editor = converter.editor;\n                    }\n                    if ('headerFilterFunc' in converter) {\n                        columndef.headerFilterFunc = converter.headerFilterFunc;\n                    }\n                }\n                delete columndef.filter;\n            }\n            if ('formatterparams' in columndef) {\n                delete columndef.formatterparams;\n            }\n            if ('filterparams' in columndef) {\n                delete columndef.filterparams;\n            }\n            return columndef;\n        }\n    );\n};"],"file":"tabulator-converters.min.js"}