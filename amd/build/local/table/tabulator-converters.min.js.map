{"version":3,"sources":["../../../src/local/table/tabulator-converters.js"],"names":["columnSetup","columndefs","tableHandler","tableUniqueId","TABULATOR_CONVERTER","transformer","coldef","to","entityClass","filterParams","entityclass","displayField","displayfield","values","headerFilterFunc","showListOnEmpty","allowEmpty","cell","value","columndef","colprop","JSON","parse","params","map","additionalProps","Object","assign","additionalParameters","tabconverter","converter","filter","headerFilter","headerFilterParams"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module to convert between Moodle fields and format and Tabulator formats.\n *\n * @module   local_cltools/table/dynamic.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {validateRemote} from './tabulator-edition';\nimport {entityLookup} from \"./tabulator-entity-lookup\";\n\nexport const columnSetup = async (columndefs, tableHandler, tableUniqueId) => {\n    const TABULATOR_CONVERTER = {\n        'formatter': {},\n        'filter': {\n            'select': {\n                transformer: (coldef) => {\n                    coldef['headerFilterFunc'] = '=';\n                    return coldef;\n                }\n            },\n            'entity_lookup': {\n                to: 'autocomplete',\n                transformer: (coldef) => {\n                    const entityClass = coldef.filterParams.entityclass;\n                    const displayField = coldef.filterParams.displayfield;\n                    coldef.filterParams = {values: entityLookup(entityClass, displayField)};\n                    coldef.headerFilterFunc = '=';\n                    coldef.showListOnEmpty = true;\n                    coldef.allowEmpty = true;\n                    return coldef;\n                }\n            }\n        },\n        'validator': {\n            'remote': {\n                to: (cell, value) =>\n                    validateRemote(cell, value, tableHandler, tableUniqueId)\n            }\n        },\n        'editor': {}\n    };\n    // Prepare entity list (this can be huge).\n    for await (const columndef of columndefs) {\n        for (const colprop in columndef) {\n            if (colprop in TABULATOR_CONVERTER) {\n                if ((colprop + \"Params\") in columndef) {\n                    // Decode as it is JSON based encoded.\n                    columndef[colprop + \"Params\"] = JSON.parse(columndef[colprop + \"Params\"]);\n                }\n                if (columndef[colprop] === 'entity_lookup') {\n                    const params = columndef[colprop + \"Params\"];\n                    await entityLookup(params.entityclass, params.displayfield);\n                }\n            }\n        }\n    }\n    columndefs =  columndefs.map(\n        (columndef) => {\n            if (\"additionalParams\" in columndef) {\n                const additionalProps = JSON.parse(columndef[\"additionalParams\"]);\n                if (typeof additionalProps === 'object') {\n                    columndef = Object.assign(columndef, additionalProps);\n                    delete(columndef.additionalParameters);\n                }\n            }\n            for (const colprop in columndef) {\n                if (colprop in TABULATOR_CONVERTER) {\n                    const tabconverter = TABULATOR_CONVERTER[colprop];\n                    if (columndef[colprop] in tabconverter) {\n                        const converter = tabconverter[columndef[colprop]];\n                        if (converter.to) {\n                            columndef[colprop] = converter.to;\n                        }\n                        if (converter.transformer) {\n                            columndef = converter.transformer(columndef);\n                        }\n                    }\n                }\n            }\n\n            // Preload all values for entityselector\n            // Make sure filters are in fact headfilters.\n            if (columndef.filter) {\n                columndef.headerFilter = columndef.filter;\n            }\n            if (columndef.filterParams) {\n                columndef.headerFilterParams = columndef.filterParams;\n            }\n            return columndef;\n        }\n    );\n    return columndefs;\n};"],"file":"tabulator-converters.min.js"}