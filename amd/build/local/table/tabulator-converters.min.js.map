{"version":3,"sources":["../../../src/local/table/tabulator-converters.js"],"names":["dateEditor","cell","onRendered","success","editor","document","createElement","setAttribute","style","padding","width","boxSizing","value","getValue","format","focus","css","successFunc","addEventListener","formatterFilterTransform","columndefs","tableHandler","tableUniqueId","TABULATOR_CONVERTER","to","transformer","coldef","map","columndef","colprop","tabconverter","JSON","parse","converter","filter","headerFilter","filterParams","headerFilterParams"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module to convert between Moodle fields and format and Tabulator formats.\n *\n * @module   local_cltools/table/dynamic.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport moment from 'local_cltools/local/moment-lazy';\nimport {validateRemote} from './tabulator-edition';\n\nconst dateEditor = (cell, onRendered, success) => {\n    // Create and style editor.\n    var editor = document.createElement(\"input\");\n\n    editor.setAttribute(\"type\", \"date\");\n\n    // Create and style input\n    editor.style.padding = \"3px\";\n    editor.style.width = \"100%\";\n    editor.style.boxSizing = \"border-box\";\n\n    // Set value of editor to the current value of the cell.\n    editor.value = moment(cell.getValue(), \"DD/MM/YYYY\").format(\"YYYY-MM-DD\");\n\n    // Set focus on the select box when the editor is selected (timeout allows for editor to be added to DOM)\n    onRendered(function () {\n        editor.focus();\n        editor.style.css = \"100%\";\n    });\n\n    // When the value has been set, trigger the cell to update\n    function successFunc() {\n        success(moment(editor.value, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\"));\n    }\n\n    editor.addEventListener(\"change\", successFunc);\n    editor.addEventListener(\"blur\", successFunc);\n\n    // Return the editor element\n    return editor;\n};\n\nexport const formatterFilterTransform = (columndefs, tableHandler, tableUniqueId) => {\n    const TABULATOR_CONVERTER = {\n        'formatter': {},\n        'filter': {\n            'date': {\n                to: dateEditor\n            },\n            'select': {\n                transformer: (coldef) => {\n                    coldef['headerFilterFunc'] = '=';\n                    return coldef;\n                }\n            }\n        },\n        'validator': {\n            'remote': {\n                to: (cell, value) =>\n                    validateRemote(cell, value, tableHandler, tableUniqueId)\n            }\n        },\n        'editor': {\n            'date': {\n                to: dateEditor\n            }\n        }\n    };\n    return columndefs.map(\n        (columndef) => {\n            for (const colprop in columndef) {\n                if (colprop in TABULATOR_CONVERTER) {\n                    const tabconverter = TABULATOR_CONVERTER[colprop];\n                    if ((colprop + \"Params\") in columndef) {\n                        // Decode as it is JSON based encoded.\n                        columndef[colprop + \"Params\"] = JSON.parse(columndef[colprop + \"Params\"]);\n                    }\n                    if (columndef[colprop] in tabconverter) {\n                        const converter = tabconverter[columndef[colprop]];\n                        columndef[colprop] = converter.to;\n                        if (converter.transformer) {\n                            columndef = converter.transformer(columndef);\n                        }\n                    }\n                }\n            }\n            // Make sure filters are in fact headfilters.\n            if (columndef.filter)  {\n                columndef.headerFilter = columndef.filter;\n            }\n            if (columndef.filterParams) {\n                columndef.headerFilterParams = columndef.filterParams;\n            }\n            return columndef;\n        }\n    );\n};"],"file":"tabulator-converters.min.js"}