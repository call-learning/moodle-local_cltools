{"version":3,"file":"tabulator-converters.min.js","sources":["../../../src/local/table/tabulator-converters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module to convert between Moodle fields and format and Tabulator formats.\n *\n * @module   local_cltools/table/dynamic.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {validateRemote} from './tabulator-edition';\nimport {entityLookup, prepareEntityLookup} from \"./tabulator-entity-lookup\";\nimport {prepareGenericLookup} from \"./tabulator-generic-lookup\";\n\nexport const columnSetup = async (columndefs, tableHandler, tableHandlerParams, tableUniqueId) => {\n    const TABULATOR_CONVERTER = {\n        'formatter': {},\n        'filter': {\n            'select': {\n                transformer: (coldef) => {\n                    coldef['headerFilterFunc'] = '=';\n                    return coldef;\n                }\n            },\n            'entity_lookup': {\n                to: 'autocomplete',\n                transformer: (coldef) => {\n                    const entityClass = coldef.filterParams.entityclass;\n                    const displayField = coldef.filterParams.displayfield;\n                    coldef.filterParams = {values: entityLookup(entityClass, displayField)};\n                    coldef.headerFilterFunc = '=';\n                    coldef.showListOnEmpty = true;\n                    coldef.allowEmpty = true;\n                    return coldef;\n                }\n            }\n        },\n        'validator': {\n            'remote': {\n                to: (cell, value) =>\n                    validateRemote(cell, value, tableHandler, tableHandlerParams, tableUniqueId)\n            }\n        },\n        'editor': {}\n    };\n    // Prepare entity list (this can be huge).\n    for await (const columndef of columndefs) {\n        for (const colprop in columndef) {\n            if (colprop in TABULATOR_CONVERTER) {\n                if ((colprop + \"Params\") in columndef) {\n                    // Decode as it is JSON based encoded.\n                    columndef[colprop + \"Params\"] = JSON.parse(columndef[colprop + \"Params\"]);\n                }\n                if (columndef[colprop] === 'entity_lookup') {\n                    const params = columndef[colprop + \"Params\"];\n                    await prepareEntityLookup(params.entityclass, params.displayfield);\n                }\n                if (columndef[colprop] === 'generic_lookup') {\n                    const params = columndef[colprop + \"Params\"];\n                    await prepareGenericLookup(params.type);\n                }\n            }\n        }\n    }\n    columndefs =  columndefs.map(\n        (columndef) => {\n            if (\"additionalParams\" in columndef) {\n                const additionalProps = JSON.parse(columndef[\"additionalParams\"]);\n                if (typeof additionalProps === 'object') {\n                    columndef = Object.assign(columndef, additionalProps);\n                    delete(columndef.additionalParameters);\n                }\n            }\n            for (const colprop in columndef) {\n                if (colprop in TABULATOR_CONVERTER) {\n                    const tabconverter = TABULATOR_CONVERTER[colprop];\n                    if (columndef[colprop] in tabconverter) {\n                        const converter = tabconverter[columndef[colprop]];\n                        if (converter.to) {\n                            columndef[colprop] = converter.to;\n                        }\n                        if (converter.transformer) {\n                            columndef = converter.transformer(columndef);\n                        }\n                    }\n                }\n            }\n\n            // Preload all values for entityselector\n            // Make sure filters are in fact headfilters.\n            if (columndef.filter) {\n                columndef.headerFilter = columndef.filter;\n            }\n            if (columndef.filterParams) {\n                columndef.headerFilterParams = columndef.filterParams;\n            }\n            return columndef;\n        }\n    );\n    return columndefs;\n};"],"names":["columnSetup","columndefs","tableHandler","tableHandlerParams","tableUniqueId","TABULATOR_CONVERTER","transformer","coldef","to","entityClass","filterParams","entityclass","displayField","displayfield","values","headerFilterFunc","showListOnEmpty","allowEmpty","cell","value","columndef","colprop","JSON","parse","params","type","map","additionalProps","_typeof","Object","assign","additionalParameters","tabconverter","converter","filter","headerFilter","headerFilterParams"],"mappings":"u/DAyBaA,yCAAc,iBAAOC,WAAYC,aAAcC,mBAAoBC,wPACtEC,oBAAsB,WACX,UACH,QACI,CACNC,YAAa,SAACC,eACVA,OAAM,iBAAuB,IACtBA,uBAGE,CACbC,GAAI,eACJF,YAAa,SAACC,YACJE,YAAcF,OAAOG,aAAaC,YAClCC,aAAeL,OAAOG,aAAaG,oBACzCN,OAAOG,aAAe,CAACI,QAAQ,uCAAaL,YAAaG,eACzDL,OAAOQ,iBAAmB,IAC1BR,OAAOS,iBAAkB,EACzBT,OAAOU,YAAa,EACbV,oBAIN,QACC,CACNC,GAAI,SAACU,KAAMC,cACP,oCAAeD,KAAMC,MAAOjB,aAAcC,mBAAoBC,yBAGhE,+FAGgBH,sJAAbmB,0DACSA,qFAAXC,6BACQhB,gDACNgB,QAAU,WAAaD,YAExBA,UAAUC,QAAU,UAAYC,KAAKC,MAAMH,UAAUC,QAAU,YAExC,kBAAvBD,UAAUC,wCACJG,OAASJ,UAAUC,QAAU,4BAC7B,8CAAoBG,OAAOb,YAAaa,OAAOX,yBAE9B,mBAAvBO,UAAUC,wCACJG,QAASJ,UAAUC,QAAU,4BAC7B,gDAAqBG,QAAOC,0jBAKlDxB,WAAcA,WAAWyB,KACrB,SAACN,cACO,qBAAsBA,UAAW,KAC3BO,gBAAkBL,KAAKC,MAAMH,UAAS,kBACb,WAA3BQ,QAAOD,yBACPP,UAAYS,OAAOC,OAAOV,UAAWO,kBACpBI,yBAGpB,IAAMV,YAAWD,aACdC,YAAWhB,oBAAqB,KAC1B2B,aAAe3B,oBAAoBgB,aACrCD,UAAUC,YAAYW,aAAc,KAC9BC,UAAYD,aAAaZ,UAAUC,WACrCY,UAAUzB,KACVY,UAAUC,UAAWY,UAAUzB,IAE/ByB,UAAU3B,cACVc,UAAYa,UAAU3B,YAAYc,oBAQ9CA,UAAUc,SACVd,UAAUe,aAAef,UAAUc,QAEnCd,UAAUV,eACVU,UAAUgB,mBAAqBhB,UAAUV,cAEtCU,sCAGRnB"}