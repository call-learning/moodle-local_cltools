{"version":3,"sources":["../../../src/local/table/tabulator-edition.js"],"names":["validateRemote","tableHandler","tableUniqueid","cell","value","args","handler","uniqueid","id","getData","field","getField","Promise","race","methodname","catch","Notification","exception","then","result","Array","isArray","warnings","length","addNotification","message","reduce","a","w","success","cellEdited","data","getValue","oldvalue","getOldValue","document","dispatchEvent","CustomEvent"],"mappings":"qNAyBA,uD,+TASO,GAAMA,CAAAA,CAAc,4CAAG,WAAOC,CAAP,CAAqBC,CAArB,CAAoCC,CAApC,CAA0CC,CAA1C,yFACpBC,CADoB,CACb,CACTC,OAAO,CAAEL,CADA,CAETM,QAAQ,CAAEL,CAFD,CAGTM,EAAE,CAAEL,CAAI,CAACM,OAAL,GAAeD,EAHV,CAITE,KAAK,CAAEP,CAAI,CAACQ,QAAL,EAJE,CAKTP,KAAK,CAAEA,CALE,CADa,gBAQbQ,CAAAA,OAAO,CAACC,IAAR,CACT,WACI,CAAC,CACGC,UAAU,CAAE,sCADf,CAEGT,IAAI,CAAEA,CAFT,CAAD,CADJ,CADS,EAOXU,KAPW,CAOLC,UAAaC,SAPR,EAOmBC,IAPnB,CAQT,SAACC,CAAD,CAAY,CACR,GAAIC,KAAK,CAACC,OAAN,CAAcF,CAAM,CAACG,QAArB,GAAkCH,CAAM,CAACG,QAAP,CAAgBC,MAAtD,CAA8D,CAC1DP,UAAaQ,eAAb,CACI,CACIC,OAAO,CAAEN,CAAM,CAACG,QAAP,CAAgBI,MAAhB,CAAuB,SAACC,CAAD,CAAIC,CAAJ,QAAWD,CAAAA,CAAC,CAAG,GAAJ,CAAUC,CAArB,CAAvB,CAAgD,EAAhD,CADb,CADJ,CAKH,CACD,MAAOT,CAAAA,CAAM,CAACU,OACjB,CAjBQ,CARa,iFAAH,uDAApB,C,mBAoCA,GAAMC,CAAAA,CAAU,CAAG,SAAC7B,CAAD,CAAeC,CAAf,CAA8B6B,CAA9B,CAAuC,CAC7D,GAAM1B,CAAAA,CAAI,CAAG,CACTC,OAAO,CAAEL,CADA,CAETM,QAAQ,CAAEL,CAFD,CAGTM,EAAE,CAAEuB,CAAI,CAACtB,OAAL,GAAeD,EAHV,CAITE,KAAK,CAAEqB,CAAI,CAACpB,QAAL,EAJE,CAKTP,KAAK,CAAE2B,CAAI,CAACC,QAAL,EALE,CAMTC,QAAQ,CAAEF,CAAI,CAACG,WAAL,EAND,CAAb,CASA,MAAOtB,CAAAA,OAAO,CAACC,IAAR,CACH,WACI,CAAC,CACGC,UAAU,CAAE,iCADf,CAEGT,IAAI,CAAEA,CAFT,CAAD,CADJ,CADG,EAOLU,KAPK,CAOCC,UAAaC,SAPd,EAOyBC,IAPzB,CAQH,SAACC,CAAD,CAAY,CACR,GAAIA,CAAM,EAAIA,CAAM,CAACU,OAArB,CAA8B,CAC1BM,QAAQ,CAACC,aAAT,CAAuB,GAAIC,CAAAA,WAAJ,CAAgB,uBAAhB,CAAyChC,CAAzC,CAAvB,CACH,CAFD,IAEO,CACH,GAAIe,KAAK,CAACC,OAAN,CAAcF,CAAM,CAACG,QAArB,GAAkCH,CAAM,CAACG,QAAP,CAAgBC,MAAtD,CAA8D,CAC1DP,UAAaQ,eAAb,CACI,CACIC,OAAO,CAAEN,CAAM,CAACG,QAAP,CAAgBI,MAAhB,CAAuB,SAACC,CAAD,CAAIC,CAAJ,QAAWD,CAAAA,CAAC,CAAG,GAAJ,CAAUC,CAArB,CAAvB,CAAgD,EAAhD,CADb,CADJ,CAKH,CACD,QACH,CACD,QACH,CAtBE,CAuBV,CAjCM,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module to manage Tabulator cell editiion.\n *\n * @module   local_cltools/table/tabulator-edition.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport {call as ajaxCall} from \"core/ajax\";\nimport Notification from 'core/notification';\n\n/**\n * Send the value back to server and send an tabulator-cell-edited event\n *\n * @param {String} tableHandler\n * @param {String} tableUniqueid\n * @param {CellComponent} data\n */\nexport const validateRemote = async (tableHandler, tableUniqueid, cell, value) => {\n    const args = {\n        handler: tableHandler,\n        uniqueid: tableUniqueid,\n        id: cell.getData().id,\n        field: cell.getField(),\n        value: value\n    };\n    return await Promise.race(\n        ajaxCall(\n            [{\n                methodname: 'cltools_dynamic_table_is_value_valid',\n                args: args\n            }]\n        )\n    ).catch(Notification.exception).then(\n        (result) => {\n            if (Array.isArray(result.warnings) && result.warnings.length) {\n                Notification.addNotification(\n                    {\n                        message: result.warnings.reduce((a, w) => (a + ',' + w), '')\n                    }\n                );\n            }\n            return result.success;\n        });\n};\n\n\n/**\n * Send the value back to server and send an tabulator-cell-edited event\n *\n * @param {String} tableHandler\n * @param {String} tableUniqueid\n * @param {CellComponent} data\n */\nexport const cellEdited = (tableHandler, tableUniqueid, data) => {\n    const args = {\n        handler: tableHandler,\n        uniqueid: tableUniqueid,\n        id: data.getData().id,\n        field: data.getField(),\n        value: data.getValue(),\n        oldvalue: data.getOldValue(),\n\n    };\n    return Promise.race(\n        ajaxCall(\n            [{\n                methodname: 'cltools_dynamic_table_set_value',\n                args: args\n            }]\n        )\n    ).catch(Notification.exception).then(\n        (result) => {\n            if (result && result.success) {\n                document.dispatchEvent(new CustomEvent('tabulator-cell-edited', args));\n            } else {\n                if (Array.isArray(result.warnings) && result.warnings.length) {\n                    Notification.addNotification(\n                        {\n                            message: result.warnings.reduce((a, w) => (a + ',' + w), '')\n                        }\n                    );\n                }\n                return false;\n            }\n            return true;\n        });\n};\n"],"file":"tabulator-edition.min.js"}