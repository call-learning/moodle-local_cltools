{"version":3,"file":"tabulator-entity-lookup.min.js","sources":["../../../src/local/table/tabulator-entity-lookup.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * AMD module to store the entity lookup values\n *\n * @module   local_cltools/table/tabulator-entity-lookup.js\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {entityTableLookup} from \"./repository\";\n\n\nconst ENTITY_LOOKUP_PREFIX = \"entityLookup\";\n\n/**\n * Compute Prefix\n * @param {string} entityclass\n * @param {string} displayfield\n * @return {string}\n */\nconst computePrefix = (entityclass, displayfield) => ENTITY_LOOKUP_PREFIX + \"_\" + entityclass + \"_\" + displayfield;\n/**\n * Entity Lookup\n * @param {string} entityclass\n * @param {string} displayfield\n * @return {Array}\n */\nexport const entityLookup = (entityclass, displayfield) => {\n    const values = sessionStorage.getItem(computePrefix(entityclass, displayfield));\n    return values ? JSON.parse(values) : [];\n};\n\n/**\n * Entity Lookup preparation\n * @param {string} entityclass\n * @param {string} displayfield\n * @return {void}\n */\nexport const prepareEntityLookup = async(entityclass, displayfield) => {\n    window.onbeforeunload = () => {\n        sessionStorage.removeItem(computePrefix(entityclass, displayfield));\n    };\n    const lookupValues = await entityTableLookup({\n        entityclass: entityclass,\n        displayfield: displayfield,\n    }).catch(Notification.exception)\n        .then(\n            (result) => {\n                if (result.warnings && result.warnings.length !== 0) {\n                    Notification.addNotification(\n                        {\n                            message: result.warnings.reduce((a, w) => (a + ' ' + w.message), '')\n                        }\n                    );\n                    return [];\n                }\n                return Object.fromEntries(result.values.map(({id, value}) => ([id, value])));\n            });\n    sessionStorage.setItem(computePrefix(entityclass, displayfield), JSON.stringify(lookupValues));\n};\n"],"names":["computePrefix","entityclass","displayfield","ENTITY_LOOKUP_PREFIX","values","sessionStorage","getItem","JSON","parse","prepareEntityLookup","window","onbeforeunload","removeItem","catch","Notification","exception","then","result","warnings","length","addNotification","message","reduce","a","w","Object","fromEntries","map","id","value","lookupValues","setItem","stringify"],"mappings":"qjBAkCMA,cAAgB,SAACC,YAAaC,oBAAiBC,gBAA6BF,YAAc,IAAMC,oCAO1E,SAACD,YAAaC,kBAChCE,OAASC,eAAeC,QAAQN,cAAcC,YAAaC,sBAC1DE,OAASG,KAAKC,MAAMJ,QAAU,gBAS5BK,iDAAsB,iBAAMR,YAAaC,2IAClDQ,OAAOC,eAAiB,WACpBN,eAAeO,WAAWZ,cAAcC,YAAaC,iCAE9B,iCAAkB,CACzCD,YAAaA,YACbC,aAAcA,eACfW,MAAMC,sBAAaC,WACjBC,MACG,SAACC,eACOA,OAAOC,UAAuC,IAA3BD,OAAOC,SAASC,8BACtBC,gBACT,CACIC,QAASJ,OAAOC,SAASI,QAAO,SAACC,EAAGC,UAAOD,EAAI,IAAMC,EAAEH,UAAU,MAGlE,IAEJI,OAAOC,YAAYT,OAAOb,OAAOuB,KAAI,sBAAkB,OAAhBC,SAAIC,qBAdxDC,2BAgBNzB,eAAe0B,QAAQ/B,cAAcC,YAAaC,cAAeK,KAAKyB,UAAUF"}